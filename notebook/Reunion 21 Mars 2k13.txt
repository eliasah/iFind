			Mode d indexation : 

Type de données abstraits qu'on va utiliser : 
	domaine : Type de Données Abstraits
	construction : requête [string -> requête]
On a définit une syntaxe. 
	test : 
	-> estValide(requête) ? false/true (on utilise BNF[] pour tester la validité de la requête)
	-> BNF : 	
	




	TYPE : OPERATEUR 
		constantes : plus, OR et Exclu : OPERATEUR
 	TYPE : REQUETE 

 		_construction :  -> conj -> requête
				-> conj * options -> requête
				-> disj -> requête
				-> disj * options -> requête 
				-> word -> requête
				-> word * options -> requête 

			
		_test : estValide(requête) -> bool
		       estConj(requête) -> bool
		       estDisj(requête) -> bool

		_accès : getOptions()
			getWords()
		(on garde getConj() si est conj : getWords() puis recherche conjonction) 			  getDisj() si est disj : getWords() puis recherche disjonction)
			
		


	TYPE : CONJ
		cons_conj -> word * word -> conj
		cons_conj_bis -> word* conj -> conj
		test : estConj(CONJ) -> bool 

		accès : getConj()


	TYPE : DISJ
		cons_disj -> word* word -> disj
		cons_disj_bis -> word * disj -> disj
	
		accès : getDisj()
	
	TYPE : WORD 
		cons_word -> 
		accès : getWords()
		
	
	TYPE : JONCTION (depreciated)
		cons_jonc -> word* word -> jonc
		cons_jonc_bis -> word * jonc -> jonc

		test : estConjonction (requête) -> bool
		       estDisjonction (requête) -> bool 

	TYPE : OPTIONS
		cons_options : word 	      -> options
			       word * options -> options
		test :
			       estOptions(options) -> bool

		accès : getOptions() 
	
		

	
	
